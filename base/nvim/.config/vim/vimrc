
" {{{Make vim respects XDG specification
"set runtimepath^=$XDG_CONFIG_HOME/vim
"set runtimepath+=$XDG_DATA_HOME/vim
"set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim

" }}}

" Автоматически устанавливает менеджера плагинов vimplug если нет
"if empty(glob('~/.local/share/vim/site/autoload/plug.vim'))
"  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
"    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"  autocmd VimEnter * PlugInstall --sync | source ~/.config/vim/vimrc
"endif

""" Список Vim плагинов -----------------------------------------------------------------

call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
"" Aesthetics
" Тема для vim
" Plug 'dracula/vim' " Тема dracula
Plug 'bluz71/vim-nightfly-guicolors' |  "Color Scheme Nightfly
" Иконки
Plug 'ryanoasis/vim-devicons' | " Иконки Nerd
" Пользовательский интерфейс
Plug 'vim-airline/vim-airline' | " Более современная статус линия
Plug 'vim-airline/vim-airline-themes' | " Темы для airline

" Syntax highlighting
Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' } | " Показывает hex палитру цветов
Plug 'machakann/vim-highlightedyank' | "Моргает при копировании

"" Функциональность
" Git
Plug 'tpope/vim-fugitive' | "Показывает название ветки git
Plug 'airblade/vim-gitgutter' | "Показывает изменённые строки кода/конфига
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' } | " Файловый менеджер
Plug 'ntpeters/vim-better-whitespace' | "Показывает пробелы
" Code
Plug 'ycm-core/YouCompleteMe' | "Авто завершение кода в vim
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim' | " fuzzy finder на стероидах

"" Более эффективные (ленивые) плагины
Plug 'mg979/vim-visual-multi' | "Режим visual на стероидах (multi режим)
Plug 'tpope/vim-commentary' | "Быстрое комментирование строк комбинацией клавиш gcc comment line (gcc again to uncomment). Работает и при выделении
Plug 'akinsho/bufferline.nvim' | "Продвинутые табы, теперь появляются всегда
Plug 'skanehira/translate.vim' | " Переводчик
Plug 'tpope/vim-surround' | " Удобная работа с скобками и ковычками call plug#end()

""" Конец списка Vim плагинов ----------------------------------------------------------

""" Основные
set nocompatible | " Включаем несовместимость настроек с Vi
set laststatus=2 | "Статус линия lightline
set noshowmode | "Не показывать стандартную статус линию

set relativenumber | "Показывает относительные номера строк
set number | "Показывать нумерацию строк
syntax enable | "Подсветка синтаксиса
set termguicolors | "Use the right colors

colorscheme nightfly | "Тема vim

set title | "Будет показывать заголовок редактируемого файла
"set cursorline | "Подсвечивает курсор по горизонтально -
"set cursorcolumn | "Подсвечивает курсор по вертикали |

set belloff=all | "Полное отключение звука ошибок
"set noerrorbells 
"set novisualbell | "Появляется звук когда делаю что-то не то

" Кодировка по умолчанию unicode
set encoding=utf-8 | " Кодировка по дефолту
set termencoding=utf-8 | " Кодировка по дефолту
set fileformat=unix | " Формат файла по дефолту
set ffs=unix,dos,mac | " Формат файла, влияющий на окончания строк - будет перебирать в указаном порядке
set fileencodings=utf-8,koir8-r,cp1251,cp866 | " Список котировок файлов для авто-определения

" Табы
set tabstop=4 | " 4 пробела на tab
set shiftwidth=4 | " Размер сдвига при нажатии на клавиши < и >
set softtabstop=4
set expandtab

" Поиск
set hlsearch | " Подсвечивает при поиске ввода
set incsearch | " Авто поиск первого совпадения
set ignorecase | " Игнорировать регистр букв при поиске
set smartcase | " If you use Capitals, search is case sensitive

" XDG пути
set backupdir=~/.cache/vim/backup | "Директория для сохранения backup'ов файлов
set directory=~/.cache/vim/swap | "Директория для сохранения swap файлов


" Разное полезное

set history=1000 | "Сохраняет кол-во последних символов
set wildmode=longest,list,full | "Добавляет авто завершение команды (в командной строке) по нажатию tab
set scrolloff=99 | "Чтобы курсор находился по середине
set ruler | "Показывать строку с позицией курсора
set wrap | " Включение переноса строк
filetype plugin indent on | " Определение типа файла
"filetype plugin on | "Load file type plugins + indentation
set autoindent | "Авто отступ для кода
set mouse=a | "Поддержка мыши (режим все)
" set t_Co=256 | "Поддержка 256 цветов
" set term=term-256color | " Для корректной работы Alacritty
set clipboard=unnamedplus | "Добавляет поддержку clipboard в vim на всей системе
set showcmd | "Показывает частичные команды в последней строке экрана
set timeoutlen=5000 ttimeoutlen=0 | " Устанавливаем задержку после нажатия
set autoread

" Убирает верхний баннер из vim file browser
let g:netrw_banner = 0

"""Конец списка настроек ---------------------------------------------------------


""" Nerd Tree config ---------------------------------------------------------

" Автоматически обновлять буфер после переименовывания файла
let NERDTreeAutoDeleteBuffer = 1
" Показать скрытые файлы
let NERDTreeShowHidden = 1
" Нумерация строк
let NERDTreeShowLineNumbers = 1
" Открывать с правой стороны
let g:NERDTreeWinPos = "left"

""" END Nerd Tree config ---------------------------------------------------------


let g:airline_powerline_fonts = 1
" let g:airline_theme='minimalist'
set background=dark | "Использовать цвета для темного background'a
highlight normal guibg=NONE | " Делает vim/nvim прозрачным


" Мерцание линейного курсора в insert mode и мерцающий кирпичный курсор в normal mode (необходимо поддержка опций на стороне терминала)
" Пояснение
" \e[0 q -> Мерцающий ▇ Block.
" \e[1 q -> Мерцающий ▇ Block (default).
" \e[2 q -> Не мерцающий ▇ Block.
" \e[3 q -> Мерцающая _ Underline.
" \e[4 q -> Не мерцающая _ Underline.
" \e[5 q -> Мерцающий | Beam (xterm).
" \e[6 q -> Не мерцающий | Beam (xterm).
let &t_SI = "\e[5 q"
let &t_EI = "\e[1 q"

""" Git Gutter -----------------------------------------------------

nmap ) <Plug>(GitGutterNextHunk)
nmap ( <Plug>(GitGutterPrevHunk)
let g:gitgutter_enabled = 1
let g:gitgutter_map_keys = 0
let g:gitgutter_highlight_liners = 1

" Включить проверку орфографии
" Space+sp
" Исправить слово, выбераете (ниже пример) и жмёте
" z=
" Перед нами вылезет окно с предложениями по исправлению
" Выбираете по цифре или просто кликнув на подходящее слово
" Чтобы быстро исправить вариантом выберите слово и жмёте
" [число]z=
" Праавильно
" Corrrect
" Добавить слово в исключение
" zg
set spell spelllang=en_us,ru
set spellfile=~/.config/nvim/spell/my-dictionary.utf-8.add | " Мой файл со словарём
setlocal spell! | " Отключает spell check при запуске файла (Включение Space+sp)

""" Other Stuff -----------------------------------------------------------------

"Cохранение позиции курсора когда я открываю vim
augroup resCur
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END
""" Конец Other Stuff -----------------------------------------------------------------

""" Vim-hexokinase -----------------------------------------------------

let g:Hexokinase_refreshEvents = ['InsertLeave']

let g:Hexokinase_optInPatterns = [
\     'full_hex',
\     'triple_hex',
\     'rgb',
\     'rgba',
\     'hsl',
\     'hsla',
\     'colour_names'
\ ]

let g:Hexokinase_highlighters = ['backgroundfull']

" Reenable hexokinase on enter
autocmd VimEnter * HexokinaseTurnOn

""" Конец Vim-hexokinase -----------------------------------------------------


"""Key mapping -----------------------------------------------------------------

"Пояснение
" nnoremap – Позволяет назначить клавиши в normal mode.
" inoremap – Позволяет назначить клавиши в insert mode     
" vnoremap – Позволяет назначить клавиши в visual mode.

" Copy selected text to system clipboard (requires gvim/nvim/vim-x11 installed)
vnoremap <C-c> "+y | " Crtl+c
map <C-p> "+P

" Nerd Tree Toggle
nnoremap <C-d> :NERDTreeToggle<CR> | " Ctrl+d

" Визуальное перемещение вниз и вверх
nnoremap K :m .-2<CR>==
nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

""" Конец Key mapping -----------------------------------------------------------------



